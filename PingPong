import pygame
pygame.init()

class PingPongGame:
    def __init__(self):
        self.WIDTH, self.HEIGHT = 800, 800
        self.WIN = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
        pygame.display.set_caption("Ping Pong")

        self.FPS = 60

        self.WHITE = (255, 255, 255)
        self.BLACK = (0, 0, 0)

        self.PADDLE_WIDTH, self.PADDLE_HEIGHT = 20, 100
        self.BALL_RADIUS = 7

        self.SCORE_FONT = pygame.font.SysFont("comicsans", 50)
        self.WINNING_SCORE = 5

        self.left_paddle = self.Paddle(10, self.HEIGHT // 2 - self.PADDLE_HEIGHT // 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT)
        self.right_paddle = self.Paddle(self.WIDTH - 10 - self.PADDLE_WIDTH, self.HEIGHT // 2 - self.PADDLE_HEIGHT // 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT)
        self.ball = self.Ball(self.WIDTH // 2, self.HEIGHT // 2, self.BALL_RADIUS)

        self.left_score = 0
        self.right_score = 0

    class Paddle:
        COLOR = (255, 255, 255)
        VEL = 4

        def __init__(self, x, y, width, height):
            self.x = self.original_x = x
            self.y = self.original_y = y
            self.width = width
            self.height = height

        def draw(self, win):
            pygame.draw.rect(win, self.COLOR, (self.x, self.y, self.width, self.height))

        def move(self, up=True):
            if up:
                self.y -= self.VEL
            else:
                self.y += self.VEL

        def reset(self):
            self.x = self.original_x
            self.y = self.original_y

    class Ball:
        MAX_VEL = 5
        COLOR = (255, 255, 255)

        def __init__(self, x, y, radius):
            self.x = self.original_x = x
            self.y = self.original_y = y
            self.radius = radius
            self.x_vel = self.MAX_VEL
            self.y_vel = 0

        def draw(self, win):
            pygame.draw.circle(win, self.COLOR, (self.x, self.y), self.radius)

        def move(self):
            self.x += self.x_vel
            self.y += self.y_vel

        def reset(self):
            self.x = self.original_x
            self.y = self.original_y
            self.y_vel = 0
            self.x_vel *= -1

    def draw(self, paddles, ball, left_score, right_score, player1_name, player2_name):
        self.WIN.fill(self.BLACK)

        name_font = pygame.font.SysFont("timesnewroman", 10)
        left_score_text = self.SCORE_FONT.render(f"{left_score}", 1, self.WHITE)
        right_score_text = self.SCORE_FONT.render(f"{right_score}", 1, self.WHITE)
        player1_text = name_font.render(f"{player1_name}", 1, self.WHITE)
        player2_text = name_font.render(f"{player2_name}", 1, self.WHITE)
        self.WIN.blit(player1_text, (10, 10))  # Adjust position as needed
        self.WIN.blit(player2_text, (self.WIDTH - player2_text.get_width() - 10, 10))  # Adjust position as needed
        self.WIN.blit(left_score_text, (self.WIDTH//4 - left_score_text.get_width()//2, 20))
        self.WIN.blit(right_score_text, (self.WIDTH * (3/4) -
                                    right_score_text.get_width()//2, 20))

        for paddle in paddles:
            paddle.draw(self.WIN)

        for i in range(10, self.HEIGHT, self.HEIGHT//20):
            if i % 2 == 1:
                continue
            pygame.draw.rect(self.WIN, self.WHITE, (self.WIDTH//2 - 5, i, 10, self.HEIGHT//20))

        ball.draw(self.WIN)
        pygame.display.update()
    
    def get_player_names(self):
        player1 = input("Enter Player 1's name: ")
        player2 = input("Enter Player 2's name: ")
        return player1, player2

    def handle_collision(self, ball, left_paddle, right_paddle):
        if ball.y + ball.radius >= self.HEIGHT:
            ball.y_vel *= -1
        elif ball.y - ball.radius <= 0:
            ball.y_vel *= -1

        if ball.x_vel < 0:
            if ball.y >= left_paddle.y and ball.y <= left_paddle.y + left_paddle.height:
                if ball.x - ball.radius <= left_paddle.x + left_paddle.width:
                    ball.x_vel *= -1

                    middle_y = left_paddle.y + left_paddle.height / 2
                    difference_in_y = middle_y - ball.y
                    reduction_factor = (left_paddle.height / 2) / ball.MAX_VEL
                    y_vel = difference_in_y / reduction_factor
                    ball.y_vel = -1 * y_vel

        else:
            if ball.y >= right_paddle.y and ball.y <= right_paddle.y + right_paddle.height:
                if ball.x + ball.radius >= right_paddle.x:
                    ball.x_vel *= -1

                    middle_y = right_paddle.y + right_paddle.height / 2
                    difference_in_y = middle_y - ball.y
                    reduction_factor = (right_paddle.height / 2) / ball.MAX_VEL
                    y_vel = difference_in_y / reduction_factor
                    ball.y_vel = -1 * y_vel

    def handle_paddle_movement(self, keys, left_paddle, right_paddle):
        if keys[pygame.K_w] and left_paddle.y - left_paddle.VEL >= 0:
            left_paddle.move(up=True)
        if keys[pygame.K_s] and left_paddle.y + left_paddle.VEL + left_paddle.height <= self.HEIGHT:
            left_paddle.move(up=False)

        if keys[pygame.K_UP] and right_paddle.y - right_paddle.VEL >= 0:
            right_paddle.move(up=True)
        if keys[pygame.K_DOWN] and right_paddle.y + right_paddle.VEL + right_paddle.height <= self.HEIGHT:
            right_paddle.move(up=False)

    def run_game(self):
        player1_name, player2_name = self.get_player_names()
        run = True
        clock = pygame.time.Clock()

        while run:
            clock.tick(self.FPS)
            self.draw([self.left_paddle, self.right_paddle], self.ball, self.left_score, self.right_score, player1_name, player2_name)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                    break

            keys = pygame.key.get_pressed()
            self.handle_paddle_movement(keys, self.left_paddle, self.right_paddle)

            self.ball.move()
            self.handle_collision(self.ball, self.left_paddle, self.right_paddle)

            if self.ball.x < 0:
                self.right_score += 1
                self.ball.reset()
            elif self.ball.x > self.WIDTH:
                self.left_score += 1
                self.ball.reset()

            won = False
            if self.left_score >= self.WINNING_SCORE:
                won = True
                win_text = f"{player1_name} Won!"
            elif self.right_score >= self.WINNING_SCORE:
                won = True
                win_text = f"{player2_name} Won!"

            if won:
                text = self.SCORE_FONT.render(win_text, 1, self.WHITE)
                self.WIN.blit(text, (self.WIDTH // 2 - text.get_width() // 2, self.HEIGHT // 2 - text.get_height() // 2))
                pygame.display.update()
                pygame.time.delay(10000)
                self.ball.reset()
                self.left_paddle.reset()
                self.right_paddle.reset()
                self.left_score = 0
                self.right_score = 0

        pygame.quit()

if __name__ == '__main__':
    game = PingPongGame()
    game.run_game()
