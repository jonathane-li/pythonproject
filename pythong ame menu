import pygame
import time
import random


pygame.init()



WIDTH, HEIGHT = 700, 500
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Ping Pong")

FPS = 60

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

PADDLE_WIDTH, PADDLE_HEIGHT = 20, 100
BALL_RADIUS = 7

SCORE_FONT = pygame.font.SysFont("comicsans", 50)
WINNING_SCORE = 10


class Paddle:
    COLOR = WHITE
    VEL = 4

    def __init__(self, x, y, width, height):
        self.x = self.original_x = x
        self.y = self.original_y = y
        self.width = width
        self.height = height

    def draw(self, win):
        pygame.draw.rect(
            win, self.COLOR, (self.x, self.y, self.width, self.height))

    def move(self, up=True):
        if up:
            self.y -= self.VEL
        else:
            self.y += self.VEL

    def reset(self):
        self.x = self.original_x
        self.y = self.original_y


class Ball:
    MAX_VEL = 5
    COLOR = WHITE

    def __init__(self, x, y, radius):
        self.x = self.original_x = x
        self.y = self.original_y = y
        self.radius = radius
        self.x_vel = self.MAX_VEL
        self.y_vel = 0

    def draw(self, win):
        pygame.draw.circle(win, self.COLOR, (self.x, self.y), self.radius)

    def move(self):
        self.x += self.x_vel
        self.y += self.y_vel

    def reset(self):
        self.x = self.original_x
        self.y = self.original_y
        self.y_vel = 0
        self.x_vel *= -1


def draw(win, paddles, ball, left_score, right_score):
    win.fill(BLACK)

    left_score_text = SCORE_FONT.render(f"{left_score}", 1, WHITE)
    right_score_text = SCORE_FONT.render(f"{right_score}", 1, WHITE)
    win.blit(left_score_text, (WIDTH//4 - left_score_text.get_width()//2, 20))
    win.blit(right_score_text, (WIDTH * (3/4) -
                                right_score_text.get_width()//2, 20))

    for paddle in paddles:
        paddle.draw(win)

    for i in range(10, HEIGHT, HEIGHT//20):
        if i % 2 == 1:
            continue
        pygame.draw.rect(win, WHITE, (WIDTH//2 - 5, i, 10, HEIGHT//20))

    ball.draw(win)
    pygame.display.update()


def handle_collision(ball, left_paddle, right_paddle):
    if ball.y + ball.radius >= HEIGHT:
        ball.y_vel *= -1
    elif ball.y - ball.radius <= 0:
        ball.y_vel *= -1

    if ball.x_vel < 0:
        if ball.y >= left_paddle.y and ball.y <= left_paddle.y + left_paddle.height:
            if ball.x - ball.radius <= left_paddle.x + left_paddle.width:
                ball.x_vel *= -1

                middle_y = left_paddle.y + left_paddle.height / 2
                difference_in_y = middle_y - ball.y
                reduction_factor = (left_paddle.height / 2) / ball.MAX_VEL
                y_vel = difference_in_y / reduction_factor
                ball.y_vel = -1 * y_vel

    else:
        if ball.y >= right_paddle.y and ball.y <= right_paddle.y + right_paddle.height:
            if ball.x + ball.radius >= right_paddle.x:
                ball.x_vel *= -1

                middle_y = right_paddle.y + right_paddle.height / 2
                difference_in_y = middle_y - ball.y
                reduction_factor = (right_paddle.height / 2) / ball.MAX_VEL
                y_vel = difference_in_y / reduction_factor
                ball.y_vel = -1 * y_vel


def handle_paddle_movement(keys, left_paddle, right_paddle):
    if keys[pygame.K_w] and left_paddle.y - left_paddle.VEL >= 0:
        left_paddle.move(up=True)
    if keys[pygame.K_s] and left_paddle.y + left_paddle.VEL + left_paddle.height <= HEIGHT:
        left_paddle.move(up=False)

    if keys[pygame.K_UP] and right_paddle.y - right_paddle.VEL >= 0:
        right_paddle.move(up=True)
    if keys[pygame.K_DOWN] and right_paddle.y + right_paddle.VEL + right_paddle.height <= HEIGHT:
        right_paddle.move(up=False)


def main():
    run = True
    clock = pygame.time.Clock()

    left_paddle = Paddle(10, HEIGHT//2 - PADDLE_HEIGHT //
                         2, PADDLE_WIDTH, PADDLE_HEIGHT)
    right_paddle = Paddle(WIDTH - 10 - PADDLE_WIDTH, HEIGHT //
                          2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)
    ball = Ball(WIDTH // 2, HEIGHT // 2, BALL_RADIUS)

    left_score = 0
    right_score = 0

    while run:
        clock.tick(FPS)
        draw(WIN, [left_paddle, right_paddle], ball, left_score, right_score)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

        keys = pygame.key.get_pressed()
        handle_paddle_movement(keys, left_paddle, right_paddle)

        ball.move()
        handle_collision(ball, left_paddle, right_paddle)

        if ball.x < 0:
            right_score += 1
            ball.reset()
        elif ball.x > WIDTH:
            left_score += 1
            ball.reset()

        won = False
        if left_score >= WINNING_SCORE:
            won = True
            win_text = "Left Player Won!"
        elif right_score >= WINNING_SCORE:
            won = True
            win_text = "Right Player Won!"

        if won:
            text = SCORE_FONT.render(win_text, 1, WHITE)
            WIN.blit(text, (WIDTH//2 - text.get_width() //
                            2, HEIGHT//2 - text.get_height()//2))
            pygame.display.update()
            pygame.time.delay(5000)
            ball.reset()
            left_paddle.reset()
            right_paddle.reset()
            left_score = 0
            right_score = 0

    pygame.quit()


class SnakeGame:
    def __init__(self):
        pygame.init()
        self.window_size = (750, 750)
        self.surface = pygame.display.set_mode(self.window_size)
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()

        # Create zig-zag background
        self.create_zigzag_background()

        # Load snake block image
        self.snake_block = pygame.image.load('block.jpg')
        self.snake_block = pygame.transform.scale(self.snake_block, (10, 10))

        # Load images
        self.apple_block = pygame.Surface((10, 10))
        self.apple_block.fill((255, 0, 0))  # Apple color (red)

        # Snake attributes
        self.snake_pos = [100, 50]
        self.snake_body = [[100, 50], [90, 50], [80, 50], [70, 50], [60, 50]]
        self.direction = 'RIGHT'
        self.change_to = self.direction
        self.speed = 15

        # Apple attributes
        self.apple_pos = [random.randrange(1, (self.window_size[0] // 10)) * 10,
                          random.randrange(1, (self.window_size[1] // 10)) * 10]

        # Score
        self.score = 0
        self.font = pygame.font.Font(None, 36)

    def create_zigzag_background(self):
        # Create a surface for the background
        self.background = pygame.Surface(self.window_size)
        self.background.fill((0, 100, 0))  # Dark green

        # Draw light green zig-zag lines
        for y in range(0, self.window_size[1], 20):
            pygame.draw.line(self.background, (0, 150, 0), (0, y), (self.window_size[0], y), 10)
            pygame.draw.line(self.background, (0, 100, 0), (10, y), (self.window_size[0], y), 10)

    def draw_elements(self):
        self.surface.blit(self.background, (0, 0))

        # Draw snake and apple
        for pos in self.snake_body:
            self.surface.blit(self.snake_block, pos)
        self.surface.blit(self.apple_block, self.apple_pos)

        # Display score
        score_text = self.font.render(f'Score: {self.score}', True, (255, 255, 255))
        self.surface.blit(score_text, (10, 10))

        pygame.display.flip()

    def run_game(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:  # Handle the window close event
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        self.change_to = 'UP'
                    elif event.key == pygame.K_DOWN:
                        self.change_to = 'DOWN'
                    elif event.key == pygame.K_LEFT:
                        self.change_to = 'LEFT'
                    elif event.key == pygame.K_RIGHT:
                        self.change_to = 'RIGHT'

            # Change the direction according to the pressed key
            if self.change_to == 'UP' and not self.direction == 'DOWN':
                self.direction = 'UP'
            if self.change_to == 'DOWN' and not self.direction == 'UP':
                self.direction = 'DOWN'
            if self.change_to == 'LEFT' and not self.direction == 'RIGHT':
                self.direction = 'LEFT'
            if self.change_to == 'RIGHT' and not self.direction == 'LEFT':
                self.direction = 'RIGHT'

            # Move the snake
            if self.direction == 'UP':
                self.snake_pos[1] -= 10
            if self.direction == 'DOWN':
                self.snake_pos[1] += 10
            if self.direction == 'LEFT':
                self.snake_pos[0] -= 10
            if self.direction == 'RIGHT':
                self.snake_pos[0] += 10

            # Check for collisions with the walls or itself
            if (
                self.snake_pos[0] < 0 or
                self.snake_pos[0] > self.window_size[0] - 10 or
                self.snake_pos[1] < 0 or
                self.snake_pos[1] > self.window_size[1] - 10 or
                self.snake_pos in self.snake_body[1:]
            ):
                pygame.quit()
                quit()

            # Check if the snake has eaten the apple
            if self.snake_pos == self.apple_pos:
                self.apple_pos = [random.randrange(1, (self.window_size[0] // 10)) * 10,
                                  random.randrange(1, (self.window_size[1] // 10)) * 10]
                self.score += 1
                self.snake_body.append(list(self.snake_pos))  # Use list() to create a copy

            else:
                # Remove the last segment of the snake
                self.snake_body.pop()

            # Add a new segment to the snake
            self.snake_body.insert(0, list(self.snake_pos))

            # Draw the game elements
            self.draw_elements()

            # Control the speed of the game
            self.clock.tick(self.speed)

def menu():
    print("Welcome to the Game Menu!")
    print("1. Snake Game")
    print("2. Ping Pong Game")
    choice = input("Enter the number of your choice: ")

    if choice == "1":
        snake_game = SnakeGame()
        snake_game.run_game()
    elif choice == "2":
        pong_game = PongGame()
        pong_game.main()
    else:
        print("Invalid choice. Please enter 1 or 2.")

if __name__ == '__main__':
    menu()
    

    
