import pygame
import sys
import time
import random
import numpy as np
import math

pygame.init()


WIDTH, HEIGHT = 800, 800


WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Menu")


menu_font = pygame.font.SysFont("comicsans", 50)
menu_items = ["Snake", "Connect Four", "Pong", "Quit"]
selected_item = 0 
class SnakeGame:
    def __init__(self):
        pygame.init()
        self.window_size = (500, 500)
        self.surface = pygame.display.set_mode(self.window_size)
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()


        self.create_zigzag_background()

        self.snake_block = pygame.image.load('block.jpg')
        self.snake_block = pygame.transform.scale(self.snake_block, (10, 10))

        self.apple_block = pygame.Surface((10, 10))
        self.apple_block.fill((255, 0, 0))  # Apple color (red)

        self.snake_pos = [100, 50]
        self.snake_body = [[100, 50], [90, 50], [80, 50], [70, 50], [60, 50]]
        self.direction = 'RIGHT'
        self.change_to = self.direction
        self.speed = 15


        self.apple_pos = [random.randrange(1, (self.window_size[0] // 10)) * 10,
                          random.randrange(1, (self.window_size[1] // 10)) * 10]

        self.score = 0
        self.font = pygame.font.Font(None, 36)

    def create_zigzag_background(self):
        self.background = pygame.Surface(self.window_size)
        self.background.fill((0, 100, 0)) 


    def draw_elements(self):
        self.surface.blit(self.background, (0, 0))


        for pos in self.snake_body:
            self.surface.blit(self.snake_block, pos)
        self.surface.blit(self.apple_block, self.apple_pos)

        score_text = self.font.render(f'Score: {self.score}', True, (255, 255, 255))
        self.surface.blit(score_text, (10, 10))

        pygame.display.flip()

    def run_game(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                    break
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        self.change_to = 'UP'
                    elif event.key == pygame.K_DOWN:
                        self.change_to = 'DOWN'
                    elif event.key == pygame.K_LEFT:
                        self.change_to = 'LEFT'
                    elif event.key == pygame.K_RIGHT:
                        self.change_to = 'RIGHT'

            
            if self.change_to == 'UP' and not self.direction == 'DOWN':
                self.direction = 'UP'
            if self.change_to == 'DOWN' and not self.direction == 'UP':
                self.direction = 'DOWN'
            if self.change_to == 'LEFT' and not self.direction == 'RIGHT':
                self.direction = 'LEFT'
            if self.change_to == 'RIGHT' and not self.direction == 'LEFT':
                self.direction = 'RIGHT'

     
            if self.direction == 'UP':
                self.snake_pos[1] -= 10
            if self.direction == 'DOWN':
                self.snake_pos[1] += 10
            if self.direction == 'LEFT':
                self.snake_pos[0] -= 10
            if self.direction == 'RIGHT':
                self.snake_pos[0] += 10

            if (
                self.snake_pos[0] < 0 or
                self.snake_pos[0] > self.window_size[0] - 10 or
                self.snake_pos[1] < 0 or
                self.snake_pos[1] > self.window_size[1] - 10 or
                self.snake_pos in self.snake_body[1:]
            ):
                pygame.quit()
                quit()

   
            if self.snake_pos == self.apple_pos:
                self.apple_pos = [random.randrange(1, (self.window_size[0] // 10)) * 10,
                                  random.randrange(1, (self.window_size[1] // 10)) * 10]
                self.score += 1
                self.snake_body.append(list(self.snake_pos)) 

            else:
     
                self.snake_body.pop()

            self.snake_body.insert(0, list(self.snake_pos))

      
            self.draw_elements()

        
            self.clock.tick(self.speed)

def run_snake_game():
    game = SnakeGame()
    game.run_game()

pygame.init()

class ConnectFourGame:
    def __init__(self):
        self.BLUE = (0, 0, 230)
        self.BLACK = (0, 0, 0)
        self.RED = (255, 0, 0)
        self.YELLOW = (255, 255, 0)

        self.ROW_COUNT = 6
        self.COLUMN_COUNT = 7

        self.board = self.create_board()
        self.game_over = False
        self.turn = 0


        pygame.init()

        self.SQUARESIZE = 100

        self.width = self.COLUMN_COUNT * self.SQUARESIZE
        self.height = (self.ROW_COUNT + 1) * self.SQUARESIZE

        self.size = (self.width, self.height)

        self.RADIUS = int(self.SQUARESIZE / 2 - 5)

        self.screen = pygame.display.set_mode(self.size)

        self.myfont = pygame.font.SysFont("monospace", 75)

    def create_board(self):
        return np.zeros((self.ROW_COUNT, self.COLUMN_COUNT))

    def drop_piece(self, row, col, piece):
        self.board[row][col] = piece

    def is_valid_location(self, col):
        return self.board[self.ROW_COUNT - 1][col] == 0

    def get_next_open_row(self, col):
        for r in range(self.ROW_COUNT):
            if self.board[r][col] == 0:
                return r

    def print_board(self):
        print(np.flip(self.board, 0))

    def winning_move(self, piece):

        for c in range(self.COLUMN_COUNT - 3):
            for r in range(self.ROW_COUNT):
                if (
                    self.board[r][c] == piece
                    and self.board[r][c + 1] == piece
                    and self.board[r][c + 2] == piece
                    and self.board[r][c + 3] == piece
                ):
                    return True

      
        for c in range(self.COLUMN_COUNT):
            for r in range(self.ROW_COUNT - 3):
                if (
                    self.board[r][c] == piece
                    and self.board[r + 1][c] == piece
                    and self.board[r + 2][c] == piece
                    and self.board[r + 3][c] == piece
                ):
                    return True

        for c in range(self.COLUMN_COUNT - 3):
            for r in range(self.ROW_COUNT - 3):
                if (
                    self.board[r][c] == piece
                    and self.board[r + 1][c + 1] == piece
                    and self.board[r + 2][c + 2] == piece
                    and self.board[r + 3][c + 3] == piece
                ):
                    return True


        for c in range(self.COLUMN_COUNT - 3):
            for r in range(3, self.ROW_COUNT):
                if (
                    self.board[r][c] == piece
                    and self.board[r - 1][c + 1] == piece
                    and self.board[r - 2][c + 2] == piece
                    and self.board[r - 3][c + 3] == piece
                ):
                    return True

        return False

    def draw_board(self):
        for c in range(self.COLUMN_COUNT):
            for r in range(self.ROW_COUNT):
                pygame.draw.rect(
                    self.screen,
                    self.BLUE,
                    (c * self.SQUARESIZE, r * self.SQUARESIZE + self.SQUARESIZE, self.SQUARESIZE, self.SQUARESIZE),
                )
                pygame.draw.circle(
                    self.screen,
                    self.BLACK,
                    (int(c * self.SQUARESIZE + self.SQUARESIZE / 2), int(r * self.SQUARESIZE + self.SQUARESIZE + self.SQUARESIZE / 2)),
                    self.RADIUS,
                )

        for c in range(self.COLUMN_COUNT):
            for r in range(self.ROW_COUNT):
                if self.board[r][c] == 1:
                    pygame.draw.circle(
                        self.screen,
                        self.RED,
                        (int(c * self.SQUARESIZE + self.SQUARESIZE / 2), self.height - int(r * self.SQUARESIZE + self.SQUARESIZE / 2)),
                        self.RADIUS,
                    )
                elif self.board[r][c] == 2:
                    pygame.draw.circle(
                        self.screen,
                        self.YELLOW,
                        (int(c * self.SQUARESIZE + self.SQUARESIZE / 2), self.height - int(r * self.SQUARESIZE + self.SQUARESIZE / 2)),
                        self.RADIUS,
                    )
        pygame.display.update()

    def run_game(self):
        while not self.game_over:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()

                if event.type == pygame.MOUSEMOTION:
                    pygame.draw.rect(self.screen, self.BLACK, (0, 0, self.width, self.SQUARESIZE))
                    posx = event.pos[0]
                    if self.turn == 0:
                        pygame.draw.circle(self.screen, self.RED, (posx, int(self.SQUARESIZE / 2)), self.RADIUS)
                    else:
                        pygame.draw.circle(self.screen, self.YELLOW, (posx, int(self.SQUARESIZE / 2)), self.RADIUS)
                    pygame.display.update()

                if event.type == pygame.MOUSEBUTTONDOWN:
                    pygame.draw.rect(self.screen, self.BLACK, (0, 0, self.width, self.SQUARESIZE))
                    posx = event.pos[0]
                    col = int(math.floor(posx / self.SQUARESIZE))

                    if self.is_valid_location(col):
                        row = self.get_next_open_row(col)
                        self.drop_piece(row, col, 1 if self.turn == 0 else 2)

                        if self.winning_move(1 if self.turn == 0 else 2):
                            winner = "Player 1" if self.turn == 0 else "Player 2"
                            label = self.myfont.render(f"{winner} wins!!", 1, self.RED if self.turn == 0 else self.YELLOW)
                            self.screen.blit(label, (40, 10))
                            self.game_over = True

                    self.print_board()
                    self.draw_board()

                    self.turn += 1
                    self.turn = self.turn % 2

                    if self.game_over:
                        pygame.time.wait(3000)

        pygame.quit()

class PingPongGame:
    def __init__(self):
        self.WIDTH, self.HEIGHT = 800, 800
        self.WIN = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
        pygame.display.set_caption("Ping Pong")

        self.FPS = 60

        self.WHITE = (255, 255, 255)
        self.BLACK = (0, 0, 0)

        self.PADDLE_WIDTH, self.PADDLE_HEIGHT = 20, 100
        self.BALL_RADIUS = 7

        self.SCORE_FONT = pygame.font.SysFont("comicsans", 50)
        self.WINNING_SCORE = 5

        self.left_paddle = self.Paddle(10, self.HEIGHT // 2 - self.PADDLE_HEIGHT // 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT)
        self.right_paddle = self.Paddle(self.WIDTH - 10 - self.PADDLE_WIDTH, self.HEIGHT // 2 - self.PADDLE_HEIGHT // 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT)
        self.ball = self.Ball(self.WIDTH // 2, self.HEIGHT // 2, self.BALL_RADIUS)

        self.left_score = 0
        self.right_score = 0

    class Paddle:
        COLOR = (255, 255, 255)
        VEL = 4

        def __init__(self, x, y, width, height):
            self.x = self.original_x = x
            self.y = self.original_y = y
            self.width = width
            self.height = height

        def draw(self, win):
            pygame.draw.rect(win, self.COLOR, (self.x, self.y, self.width, self.height))

        def move(self, up=True):
            if up:
                self.y -= self.VEL
            else:
                self.y += self.VEL

        def reset(self):
            self.x = self.original_x
            self.y = self.original_y

    class Ball:
        MAX_VEL = 5
        COLOR = (255, 255, 255)

        def __init__(self, x, y, radius):
            self.x = self.original_x = x
            self.y = self.original_y = y
            self.radius = radius
            self.x_vel = self.MAX_VEL
            self.y_vel = 0

        def draw(self, win):
            pygame.draw.circle(win, self.COLOR, (self.x, self.y), self.radius)

        def move(self):
            self.x += self.x_vel
            self.y += self.y_vel

        def reset(self):
            self.x = self.original_x
            self.y = self.original_y
            self.y_vel = 0
            self.x_vel *= -1

    def draw(self, paddles, ball, left_score, right_score, player1_name, player2_name):
        self.WIN.fill(self.BLACK)

        name_font = pygame.font.SysFont("timesnewroman", 10)
        left_score_text = self.SCORE_FONT.render(f"{left_score}", 1, self.WHITE)
        right_score_text = self.SCORE_FONT.render(f"{right_score}", 1, self.WHITE)
        player1_text = name_font.render(f"{player1_name}", 1, self.WHITE)
        player2_text = name_font.render(f"{player2_name}", 1, self.WHITE)
        self.WIN.blit(player1_text, (10, 10))  
        self.WIN.blit(player2_text, (self.WIDTH - player2_text.get_width() - 10, 10)) 
        self.WIN.blit(left_score_text, (self.WIDTH//4 - left_score_text.get_width()//2, 20))
        self.WIN.blit(right_score_text, (self.WIDTH * (3/4) -
                                    right_score_text.get_width()//2, 20))

        for paddle in paddles:
            paddle.draw(self.WIN)

        for i in range(10, self.HEIGHT, self.HEIGHT//20):
            if i % 2 == 1:
                continue
            pygame.draw.rect(self.WIN, self.WHITE, (self.WIDTH//2 - 5, i, 10, self.HEIGHT//20))

        ball.draw(self.WIN)
        pygame.display.update()
    
    def get_player_names(self):
        player1 = input("Enter Player 1's name: ")
        player2 = input("Enter Player 2's name: ")
        return player1, player2

    def handle_collision(self, ball, left_paddle, right_paddle):
        if ball.y + ball.radius >= self.HEIGHT:
            ball.y_vel *= -1
        elif ball.y - ball.radius <= 0:
            ball.y_vel *= -1

        if ball.x_vel < 0:
            if ball.y >= left_paddle.y and ball.y <= left_paddle.y + left_paddle.height:
                if ball.x - ball.radius <= left_paddle.x + left_paddle.width:
                    ball.x_vel *= -1

                    middle_y = left_paddle.y + left_paddle.height / 2
                    difference_in_y = middle_y - ball.y
                    reduction_factor = (left_paddle.height / 2) / ball.MAX_VEL
                    y_vel = difference_in_y / reduction_factor
                    ball.y_vel = -1 * y_vel

        else:
            if ball.y >= right_paddle.y and ball.y <= right_paddle.y + right_paddle.height:
                if ball.x + ball.radius >= right_paddle.x:
                    ball.x_vel *= -1

                    middle_y = right_paddle.y + right_paddle.height / 2
                    difference_in_y = middle_y - ball.y
                    reduction_factor = (right_paddle.height / 2) / ball.MAX_VEL
                    y_vel = difference_in_y / reduction_factor
                    ball.y_vel = -1 * y_vel

    def handle_paddle_movement(self, keys, left_paddle, right_paddle):
        if keys[pygame.K_w] and left_paddle.y - left_paddle.VEL >= 0:
            left_paddle.move(up=True)
        if keys[pygame.K_s] and left_paddle.y + left_paddle.VEL + left_paddle.height <= self.HEIGHT:
            left_paddle.move(up=False)

        if keys[pygame.K_UP] and right_paddle.y - right_paddle.VEL >= 0:
            right_paddle.move(up=True)
        if keys[pygame.K_DOWN] and right_paddle.y + right_paddle.VEL + right_paddle.height <= self.HEIGHT:
            right_paddle.move(up=False)

    def run_game(self):
        player1_name, player2_name = self.get_player_names()
        run = True
        clock = pygame.time.Clock()

        while run:
            clock.tick(self.FPS)
            self.draw([self.left_paddle, self.right_paddle], self.ball, self.left_score, self.right_score, player1_name, player2_name)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                    break

            keys = pygame.key.get_pressed()
            self.handle_paddle_movement(keys, self.left_paddle, self.right_paddle)

            self.ball.move()
            self.handle_collision(self.ball, self.left_paddle, self.right_paddle)

            if self.ball.x < 0:
                self.right_score += 1
                self.ball.reset()
            elif self.ball.x > self.WIDTH:
                self.left_score += 1
                self.ball.reset()

            won = False
            if self.left_score >= self.WINNING_SCORE:
                won = True
                win_text = f"{player1_name} Won!"
            elif self.right_score >= self.WINNING_SCORE:
                won = True
                win_text = f"{player2_name} Won!"

            if won:
                text = self.SCORE_FONT.render(win_text, 1, self.WHITE)
                self.WIN.blit(text, (self.WIDTH // 2 - text.get_width() // 2, self.HEIGHT // 2 - text.get_height() // 2))
                pygame.display.update()
                pygame.time.delay(10000)
                self.ball.reset()
                self.left_paddle.reset()
                self.right_paddle.reset()
                self.left_score = 0
                self.right_score = 0

        pygame.quit()


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                selected_item = (selected_item + 1) % len(menu_items)
            elif event.key == pygame.K_UP:
                selected_item = (selected_item - 1) % len(menu_items)
            elif event.key == pygame.K_RETURN:
                if menu_items[selected_item] == "Snake":
                    run_snake_game()
                elif menu_items[selected_item] == "Connect Four":
                    game_connect = ConnectFourGame()
                    game_connect.run_game()
                elif menu_items[selected_item] == "Pong":
                        game = PingPongGame()
                        game.run_game()
                elif menu_items[selected_item] == "Quit":
                    pygame.quit()
                    sys.exit()

    WIN.fill((0, 0, 0))
    for i, item in enumerate(menu_items):
        color = (255, 255, 255) if i == selected_item else (128, 128, 128)
        text = menu_font.render(item, True, color)
        x = (WIN.get_width() - text.get_width()) // 2
        y = (i + 1) * 100
        WIN.blit(text, (x, y))
    pygame.display.update()
